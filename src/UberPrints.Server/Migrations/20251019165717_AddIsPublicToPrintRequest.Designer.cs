// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UberPrints.Server.Data;

#nullable disable

namespace UberPrints.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251019165717_AddIsPublicToPrintRequest")]
    partial class AddIsPublicToPrintRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UberPrints.Server.Models.Filament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuidv7()");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("StockAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("StockUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Filaments");
                });

            modelBuilder.Entity("UberPrints.Server.Models.FilamentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuidv7()");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FilamentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RequesterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FilamentId");

                    b.HasIndex("UserId");

                    b.ToTable("FilamentRequests");
                });

            modelBuilder.Entity("UberPrints.Server.Models.FilamentRequestStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuidv7()");

                    b.Property<Guid?>("ChangedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FilamentRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("FilamentRequestId");

                    b.ToTable("FilamentRequestStatusHistories");
                });

            modelBuilder.Entity("UberPrints.Server.Models.PrintRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuidv7()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FilamentId")
                        .HasColumnType("uuid");

                    b.Property<string>("GuestTrackingToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("RequestDelivery")
                        .HasColumnType("boolean");

                    b.Property<string>("RequesterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FilamentId");

                    b.HasIndex("GuestTrackingToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PrintRequests");
                });

            modelBuilder.Entity("UberPrints.Server.Models.StatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuidv7()");

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("ChangedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("RequestId");

                    b.ToTable("StatusHistories");
                });

            modelBuilder.Entity("UberPrints.Server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuidv7()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscordId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GuestSessionToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("GuestSessionToken")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UberPrints.Server.Models.FilamentRequest", b =>
                {
                    b.HasOne("UberPrints.Server.Models.Filament", "Filament")
                        .WithMany("FilamentRequests")
                        .HasForeignKey("FilamentId");

                    b.HasOne("UberPrints.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Filament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UberPrints.Server.Models.FilamentRequestStatusHistory", b =>
                {
                    b.HasOne("UberPrints.Server.Models.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId");

                    b.HasOne("UberPrints.Server.Models.FilamentRequest", "FilamentRequest")
                        .WithMany("StatusHistory")
                        .HasForeignKey("FilamentRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("FilamentRequest");
                });

            modelBuilder.Entity("UberPrints.Server.Models.PrintRequest", b =>
                {
                    b.HasOne("UberPrints.Server.Models.Filament", "Filament")
                        .WithMany("PrintRequests")
                        .HasForeignKey("FilamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UberPrints.Server.Models.User", "User")
                        .WithMany("PrintRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("Filament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UberPrints.Server.Models.StatusHistory", b =>
                {
                    b.HasOne("UberPrints.Server.Models.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId");

                    b.HasOne("UberPrints.Server.Models.PrintRequest", "Request")
                        .WithMany("StatusHistory")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("UberPrints.Server.Models.Filament", b =>
                {
                    b.Navigation("FilamentRequests");

                    b.Navigation("PrintRequests");
                });

            modelBuilder.Entity("UberPrints.Server.Models.FilamentRequest", b =>
                {
                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("UberPrints.Server.Models.PrintRequest", b =>
                {
                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("UberPrints.Server.Models.User", b =>
                {
                    b.Navigation("PrintRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
